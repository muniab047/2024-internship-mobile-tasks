// Mocks generated by Mockito 5.4.4 from annotations
// in task_6/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i16;
import 'package:task_6/core/errors/failure.dart' as _i7;
import 'package:task_6/core/network/network_info.dart' as _i15;
import 'package:task_6/core/params/params.dart' as _i8;
import 'package:task_6/features/product/data/datasource/local_data_source.dart'
    as _i13;
import 'package:task_6/features/product/data/datasource/remote_data_source.dart'
    as _i14;
import 'package:task_6/features/product/data/models/product_model.dart' as _i3;
import 'package:task_6/features/product/domain/entities/product_entity.dart'
    as _i10;
import 'package:task_6/features/product/domain/repositories/delete_product_repository.dart'
    as _i11;
import 'package:task_6/features/product/domain/repositories/get_product_repository.dart'
    as _i9;
import 'package:task_6/features/product/domain/repositories/insert_product_repository.dart'
    as _i12;
import 'package:task_6/features/product/domain/repositories/update_product_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_1 extends _i1.SmartFake implements _i3.ProductModel {
  _FakeProductModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_2 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_4 extends _i1.SmartFake
    implements _i4.AddressCheckResult {
  _FakeAddressCheckResult_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UpdateProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductRepository extends _i1.Mock
    implements _i5.UpdateProductRepository {
  MockUpdateProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>> updateProduct(
          {required _i8.UpdateProductParams? updateProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [],
          {#updateProductParams: updateProductParams},
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i7.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateProduct,
            [],
            {#updateProductParams: updateProductParams},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>>);
}

/// A class which mocks [GetProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductRepository extends _i1.Mock
    implements _i9.GetProductRepository {
  MockGetProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i10.ProductEntity>> getProduct(
          {required _i8.GetProductParams? getProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [],
          {#getProductParams: getProductParams},
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i10.ProductEntity>>.value(
                _FakeEither_0<_i7.Failure, _i10.ProductEntity>(
          this,
          Invocation.method(
            #getProduct,
            [],
            {#getProductParams: getProductParams},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i10.ProductEntity>>);
}

/// A class which mocks [DeleteProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductRepository extends _i1.Mock
    implements _i11.DeleteProductRepository {
  MockDeleteProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>> deleteProduct(
          {required _i8.DeleteProductParams? deleteProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [],
          {#deleteProductParams: deleteProductParams},
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i7.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteProduct,
            [],
            {#deleteProductParams: deleteProductParams},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>>);
}

/// A class which mocks [InsertProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsertProductRepository extends _i1.Mock
    implements _i12.InsertProductRepository {
  MockInsertProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>> insertProduct(
          {required _i8.InsertProductParams? insertProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [],
          {#insertProductParams: insertProductParams},
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i7.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #insertProduct,
            [],
            {#insertProductParams: insertProductParams},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i13.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.ProductModel> getProduct(
          _i8.GetProductParams? getProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [getProductParams],
        ),
        returnValue: _i6.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #getProduct,
            [getProductParams],
          ),
        )),
      ) as _i6.Future<_i3.ProductModel>);

  @override
  _i6.Future<_i2.Unit> cacheProduct(_i3.ProductModel? productToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProduct,
          [productToCache],
        ),
        returnValue: _i6.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #cacheProduct,
            [productToCache],
          ),
        )),
      ) as _i6.Future<_i2.Unit>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i14.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.ProductModel> getProduct(
          _i8.GetProductParams? getProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [getProductParams],
        ),
        returnValue: _i6.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #getProduct,
            [getProductParams],
          ),
        )),
      ) as _i6.Future<_i3.ProductModel>);

  @override
  _i6.Future<_i2.Unit> insertProduct(
          _i8.InsertProductParams? insertProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [insertProductParams],
        ),
        returnValue: _i6.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #insertProduct,
            [insertProductParams],
          ),
        )),
      ) as _i6.Future<_i2.Unit>);

  @override
  _i6.Future<_i2.Unit> updateProduct(
          _i8.UpdateProductParams? updateProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [updateProductParams],
        ),
        returnValue: _i6.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #updateProduct,
            [updateProductParams],
          ),
        )),
      ) as _i6.Future<_i2.Unit>);

  @override
  _i6.Future<_i2.Unit> deleteProduct(
          _i8.DeleteProductParams? deleteProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [deleteProductParams],
        ),
        returnValue: _i6.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #deleteProduct,
            [deleteProductParams],
          ),
        )),
      ) as _i6.Future<_i2.Unit>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i15.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i4.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  List<_i4.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i4.AddressCheckOptions>[],
      ) as List<_i4.AddressCheckOptions>);

  @override
  set addresses(List<_i4.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i4.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i6.Future<_i4.InternetConnectionStatus>.value(
            _i4.InternetConnectionStatus.connected),
      ) as _i6.Future<_i4.InternetConnectionStatus>);

  @override
  _i6.Stream<_i4.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i6.Stream<_i4.InternetConnectionStatus>.empty(),
      ) as _i6.Stream<_i4.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<_i4.AddressCheckResult> isHostReachable(
          _i4.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i6.Future<_i4.AddressCheckResult>.value(_FakeAddressCheckResult_4(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i6.Future<_i4.AddressCheckResult>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i16.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i6.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
