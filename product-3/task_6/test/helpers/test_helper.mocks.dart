// Mocks generated by Mockito 5.4.4 from annotations
// in task_6/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:convert' as _i20;
import 'dart:typed_data' as _i22;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i28;
import 'package:http/http.dart' as _i5;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i21;
import 'package:shared_preferences/shared_preferences.dart' as _i19;
import 'package:task_6/core/errors/failure.dart' as _i13;
import 'package:task_6/core/network/network_info.dart' as _i18;
import 'package:task_6/core/params/auth_params.dart' as _i30;
import 'package:task_6/core/params/params.dart' as _i14;
import 'package:task_6/features/authentication/data/data%20sources/local_data_source.dart'
    as _i31;
import 'package:task_6/features/authentication/data/data%20sources/remote_data_source.dart'
    as _i29;
import 'package:task_6/features/authentication/data/model/user_model.dart'
    as _i11;
import 'package:task_6/features/product/data/datasource/local_data_source.dart'
    as _i16;
import 'package:task_6/features/product/data/datasource/remote_data_source.dart'
    as _i17;
import 'package:task_6/features/product/data/models/product_model.dart' as _i3;
import 'package:task_6/features/product/domain/entities/product_entity.dart'
    as _i15;
import 'package:task_6/features/product/domain/repositories/delete_product_repository.dart'
    as _i10;
import 'package:task_6/features/product/domain/repositories/get_all_products_repository.dart'
    as _i7;
import 'package:task_6/features/product/domain/repositories/get_product_repository.dart'
    as _i6;
import 'package:task_6/features/product/domain/repositories/insert_product_repository.dart'
    as _i9;
import 'package:task_6/features/product/domain/repositories/update_product_repository.dart'
    as _i8;
import 'package:task_6/features/product/domain/usecases/delete_product.dart'
    as _i27;
import 'package:task_6/features/product/domain/usecases/get_all_products.dart'
    as _i24;
import 'package:task_6/features/product/domain/usecases/get_product.dart'
    as _i23;
import 'package:task_6/features/product/domain/usecases/insert_product.dart'
    as _i26;
import 'package:task_6/features/product/domain/usecases/update_product.dart'
    as _i25;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_1 extends _i1.SmartFake implements _i3.ProductModel {
  _FakeProductModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_2 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_4 extends _i1.SmartFake
    implements _i4.AddressCheckResult {
  _FakeAddressCheckResult_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_5 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetProductRepository_7 extends _i1.SmartFake
    implements _i6.GetProductRepository {
  _FakeGetProductRepository_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAllProductsRepository_8 extends _i1.SmartFake
    implements _i7.GetAllProductsRepository {
  _FakeGetAllProductsRepository_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateProductRepository_9 extends _i1.SmartFake
    implements _i8.UpdateProductRepository {
  _FakeUpdateProductRepository_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInsertProductRepository_10 extends _i1.SmartFake
    implements _i9.InsertProductRepository {
  _FakeInsertProductRepository_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteProductRepository_11 extends _i1.SmartFake
    implements _i10.DeleteProductRepository {
  _FakeDeleteProductRepository_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_12 extends _i1.SmartFake implements Uri {
  _FakeUri_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_13 extends _i1.SmartFake implements _i11.UserModel {
  _FakeUserModel_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UpdateProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductRepository extends _i1.Mock
    implements _i8.UpdateProductRepository {
  MockUpdateProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>> updateProduct(
          {required _i14.UpdateProductParams? updateProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [],
          {#updateProductParams: updateProductParams},
        ),
        returnValue: _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i13.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateProduct,
            [],
            {#updateProductParams: updateProductParams},
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>);
}

/// A class which mocks [GetProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductRepository extends _i1.Mock
    implements _i6.GetProductRepository {
  MockGetProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.Either<_i13.Failure, _i15.ProductEntity>> getProduct(
          {required _i14.GetProductParams? getProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [],
          {#getProductParams: getProductParams},
        ),
        returnValue:
            _i12.Future<_i2.Either<_i13.Failure, _i15.ProductEntity>>.value(
                _FakeEither_0<_i13.Failure, _i15.ProductEntity>(
          this,
          Invocation.method(
            #getProduct,
            [],
            {#getProductParams: getProductParams},
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, _i15.ProductEntity>>);
}

/// A class which mocks [DeleteProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductRepository extends _i1.Mock
    implements _i10.DeleteProductRepository {
  MockDeleteProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>> deleteProduct(
          {required _i14.DeleteProductParams? deleteProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [],
          {#deleteProductParams: deleteProductParams},
        ),
        returnValue: _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i13.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteProduct,
            [],
            {#deleteProductParams: deleteProductParams},
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>);
}

/// A class which mocks [InsertProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsertProductRepository extends _i1.Mock
    implements _i9.InsertProductRepository {
  MockInsertProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>> insertProduct(
          {required _i14.InsertProductParams? insertProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [],
          {#insertProductParams: insertProductParams},
        ),
        returnValue: _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i13.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #insertProduct,
            [],
            {#insertProductParams: insertProductParams},
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i16.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i3.ProductModel> getProduct(
          _i14.GetProductParams? getProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [getProductParams],
        ),
        returnValue: _i12.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #getProduct,
            [getProductParams],
          ),
        )),
      ) as _i12.Future<_i3.ProductModel>);

  @override
  _i12.Future<_i2.Unit> cacheProduct(_i3.ProductModel? productToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProduct,
          [productToCache],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #cacheProduct,
            [productToCache],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);

  @override
  _i12.Future<List<_i3.ProductModel>> getAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
        ),
        returnValue:
            _i12.Future<List<_i3.ProductModel>>.value(<_i3.ProductModel>[]),
      ) as _i12.Future<List<_i3.ProductModel>>);

  @override
  _i12.Future<_i2.Unit> cacheAllProducts(
          List<_i3.ProductModel>? productModelsTocache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheAllProducts,
          [productModelsTocache],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #cacheAllProducts,
            [productModelsTocache],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i17.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i3.ProductModel> getProduct(
          _i14.GetProductParams? getProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [getProductParams],
        ),
        returnValue: _i12.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #getProduct,
            [getProductParams],
          ),
        )),
      ) as _i12.Future<_i3.ProductModel>);

  @override
  _i12.Future<_i2.Unit> insertProduct(
          _i14.InsertProductParams? insertProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [insertProductParams],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #insertProduct,
            [insertProductParams],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);

  @override
  _i12.Future<_i2.Unit> updateProduct(
          _i14.UpdateProductParams? updateProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [updateProductParams],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #updateProduct,
            [updateProductParams],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);

  @override
  _i12.Future<_i2.Unit> deleteProduct(
          _i14.DeleteProductParams? deleteProductParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [deleteProductParams],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #deleteProduct,
            [deleteProductParams],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);

  @override
  _i12.Future<List<_i3.ProductModel>> getAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
        ),
        returnValue:
            _i12.Future<List<_i3.ProductModel>>.value(<_i3.ProductModel>[]),
      ) as _i12.Future<List<_i3.ProductModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i18.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i4.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  List<_i4.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i4.AddressCheckOptions>[],
      ) as List<_i4.AddressCheckOptions>);

  @override
  set addresses(List<_i4.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<_i4.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i12.Future<_i4.InternetConnectionStatus>.value(
            _i4.InternetConnectionStatus.connected),
      ) as _i12.Future<_i4.InternetConnectionStatus>);

  @override
  _i12.Stream<_i4.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i12.Stream<_i4.InternetConnectionStatus>.empty(),
      ) as _i12.Stream<_i4.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<_i4.AddressCheckResult> isHostReachable(
          _i4.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i12.Future<_i4.AddressCheckResult>.value(_FakeAddressCheckResult_4(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i12.Future<_i4.AddressCheckResult>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i19.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i12.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i5.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i5.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i12.Future<_i5.Response>);

  @override
  _i12.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i5.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i12.Future<_i5.Response>);

  @override
  _i12.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i5.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i5.Response>);

  @override
  _i12.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i5.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i5.Response>);

  @override
  _i12.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i5.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i5.Response>);

  @override
  _i12.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i5.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i5.Response>);

  @override
  _i12.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<String>.value(_i21.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<_i22.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i22.Uint8List>.value(_i22.Uint8List(0)),
      ) as _i12.Future<_i22.Uint8List>);

  @override
  _i12.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i12.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i12.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetAllProductsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProductsRepository extends _i1.Mock
    implements _i7.GetAllProductsRepository {
  MockGetAllProductsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i15.ProductEntity>>>
      getAllProducts() => (super.noSuchMethod(
            Invocation.method(
              #getAllProducts,
              [],
            ),
            returnValue: _i12.Future<
                    _i2.Either<_i13.Failure, List<_i15.ProductEntity>>>.value(
                _FakeEither_0<_i13.Failure, List<_i15.ProductEntity>>(
              this,
              Invocation.method(
                #getAllProducts,
                [],
              ),
            )),
          ) as _i12.Future<_i2.Either<_i13.Failure, List<_i15.ProductEntity>>>);
}

/// A class which mocks [GetProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProduct extends _i1.Mock implements _i23.GetProduct {
  MockGetProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetProductRepository get getProductRepository => (super.noSuchMethod(
        Invocation.getter(#getProductRepository),
        returnValue: _FakeGetProductRepository_7(
          this,
          Invocation.getter(#getProductRepository),
        ),
      ) as _i6.GetProductRepository);

  @override
  _i12.Future<_i2.Either<_i13.Failure, _i15.ProductEntity>> call(
          {required _i14.GetProductParams? getProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#getProductParams: getProductParams},
        ),
        returnValue:
            _i12.Future<_i2.Either<_i13.Failure, _i15.ProductEntity>>.value(
                _FakeEither_0<_i13.Failure, _i15.ProductEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#getProductParams: getProductParams},
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, _i15.ProductEntity>>);
}

/// A class which mocks [GetAllProducts].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProducts extends _i1.Mock implements _i24.GetAllProducts {
  MockGetAllProducts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetAllProductsRepository get getAllProductsRepository =>
      (super.noSuchMethod(
        Invocation.getter(#getAllProductsRepository),
        returnValue: _FakeGetAllProductsRepository_8(
          this,
          Invocation.getter(#getAllProductsRepository),
        ),
      ) as _i7.GetAllProductsRepository);

  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i15.ProductEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i12
            .Future<_i2.Either<_i13.Failure, List<_i15.ProductEntity>>>.value(
            _FakeEither_0<_i13.Failure, List<_i15.ProductEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, List<_i15.ProductEntity>>>);
}

/// A class which mocks [UpdateProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProduct extends _i1.Mock implements _i25.UpdateProduct {
  MockUpdateProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.UpdateProductRepository get updateProductRepository =>
      (super.noSuchMethod(
        Invocation.getter(#updateProductRepository),
        returnValue: _FakeUpdateProductRepository_9(
          this,
          Invocation.getter(#updateProductRepository),
        ),
      ) as _i8.UpdateProductRepository);

  @override
  _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>> call(
          {required _i14.UpdateProductParams? updateProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#updateProductParams: updateProductParams},
        ),
        returnValue: _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i13.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [],
            {#updateProductParams: updateProductParams},
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>);
}

/// A class which mocks [InsertProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsertProduct extends _i1.Mock implements _i26.InsertProduct {
  MockInsertProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.InsertProductRepository get insertProductRepository =>
      (super.noSuchMethod(
        Invocation.getter(#insertProductRepository),
        returnValue: _FakeInsertProductRepository_10(
          this,
          Invocation.getter(#insertProductRepository),
        ),
      ) as _i9.InsertProductRepository);

  @override
  _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>> call(
          {required _i14.InsertProductParams? insertProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#insertProductParams: insertProductParams},
        ),
        returnValue: _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i13.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [],
            {#insertProductParams: insertProductParams},
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>);
}

/// A class which mocks [DeleteProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProduct extends _i1.Mock implements _i27.DeleteProduct {
  MockDeleteProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.DeleteProductRepository get deleteProductRepository =>
      (super.noSuchMethod(
        Invocation.getter(#deleteProductRepository),
        returnValue: _FakeDeleteProductRepository_11(
          this,
          Invocation.getter(#deleteProductRepository),
        ),
      ) as _i10.DeleteProductRepository);

  @override
  _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>> call(
          {required _i14.DeleteProductParams? deleteProductParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#deleteProductParams: deleteProductParams},
        ),
        returnValue: _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i13.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [],
            {#deleteProductParams: deleteProductParams},
          ),
        )),
      ) as _i12.Future<_i2.Either<_i13.Failure, _i2.Unit>>);
}

/// A class which mocks [MultipartRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultipartRequest extends _i1.Mock implements _i5.MultipartRequest {
  MockMultipartRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get fields => (super.noSuchMethod(
        Invocation.getter(#fields),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  List<_i5.MultipartFile> get files => (super.noSuchMethod(
        Invocation.getter(#files),
        returnValue: <_i5.MultipartFile>[],
      ) as List<_i5.MultipartFile>);

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
      ) as int);

  @override
  set contentLength(int? value) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i21.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  Uri get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _FakeUri_12(
          this,
          Invocation.getter(#url),
        ),
      ) as Uri);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
      ) as bool);

  @override
  set persistentConnection(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get followRedirects => (super.noSuchMethod(
        Invocation.getter(#followRedirects),
        returnValue: false,
      ) as bool);

  @override
  set followRedirects(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #followRedirects,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get maxRedirects => (super.noSuchMethod(
        Invocation.getter(#maxRedirects),
        returnValue: 0,
      ) as int);

  @override
  set maxRedirects(int? value) => super.noSuchMethod(
        Invocation.setter(
          #maxRedirects,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get finalized => (super.noSuchMethod(
        Invocation.getter(#finalized),
        returnValue: false,
      ) as bool);

  @override
  _i5.ByteStream finalize() => (super.noSuchMethod(
        Invocation.method(
          #finalize,
          [],
        ),
        returnValue: _i21.dummyValue<_i5.ByteStream>(
          this,
          Invocation.method(
            #finalize,
            [],
          ),
        ),
      ) as _i5.ByteStream);

  @override
  _i12.Future<_i5.StreamedResponse> send() => (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
        ),
        returnValue:
            _i12.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [],
          ),
        )),
      ) as _i12.Future<_i5.StreamedResponse>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i28.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<void> write({
    required String? key,
    required String? value,
    _i28.IOSOptions? iOptions = _i28.IOSOptions.defaultOptions,
    _i28.AndroidOptions? aOptions,
    _i28.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<String?> read({
    required String? key,
    _i28.IOSOptions? iOptions = _i28.IOSOptions.defaultOptions,
    _i28.AndroidOptions? aOptions,
    _i28.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i12.Future<String?>.value(),
      ) as _i12.Future<String?>);

  @override
  _i12.Future<bool> containsKey({
    required String? key,
    _i28.IOSOptions? iOptions = _i28.IOSOptions.defaultOptions,
    _i28.AndroidOptions? aOptions,
    _i28.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<void> delete({
    required String? key,
    _i28.IOSOptions? iOptions = _i28.IOSOptions.defaultOptions,
    _i28.AndroidOptions? aOptions,
    _i28.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<Map<String, String>> readAll({
    _i28.IOSOptions? iOptions = _i28.IOSOptions.defaultOptions,
    _i28.AndroidOptions? aOptions,
    _i28.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i12.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i12.Future<Map<String, String>>);

  @override
  _i12.Future<void> deleteAll({
    _i28.IOSOptions? iOptions = _i28.IOSOptions.defaultOptions,
    _i28.AndroidOptions? aOptions,
    _i28.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i29.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<String> login(_i30.LoginParams? loginParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginParams],
        ),
        returnValue: _i12.Future<String>.value(_i21.dummyValue<String>(
          this,
          Invocation.method(
            #login,
            [loginParams],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<_i2.Unit> signUp(_i30.SignUpParams? signUpParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [signUpParams],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #signUp,
            [signUpParams],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);

  @override
  _i12.Future<_i11.UserModel> getMe(_i30.GetMeParams? getMeParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMe,
          [getMeParams],
        ),
        returnValue: _i12.Future<_i11.UserModel>.value(_FakeUserModel_13(
          this,
          Invocation.method(
            #getMe,
            [getMeParams],
          ),
        )),
      ) as _i12.Future<_i11.UserModel>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i31.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.Unit> storeToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #storeToken,
          [token],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #storeToken,
            [token],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);

  @override
  _i12.Future<String> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i12.Future<String>.value(_i21.dummyValue<String>(
          this,
          Invocation.method(
            #getToken,
            [],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<_i2.Unit> clearToken() => (super.noSuchMethod(
        Invocation.method(
          #clearToken,
          [],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #clearToken,
            [],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);

  @override
  _i12.Future<_i2.Unit> cacheUserInfo(_i11.UserModel? userToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheUserInfo,
          [userToCache],
        ),
        returnValue: _i12.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #cacheUserInfo,
            [userToCache],
          ),
        )),
      ) as _i12.Future<_i2.Unit>);
}
